# -*- coding: utf-8 -*-
"""Wine-Quality

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ecX0_BxjCwcUOdvq3wLLUsbbs_Ptej--
"""

import pandas as pd

import numpy as np

#Read the Dataset

df=pd.read_csv(r'/content/archive (5).zip')

#DATAFRAME

df.head()

#INFORMATION ABOUT THE DATA
df.info()

#TO DESCRIBE DATA
df.describe()

#TO GET COLUMN NAMES
df.columns

#SHAPE OF DATA FRAME
df.shape

#UNIQUE VALUES(CLASS OR LABEL) IN Y VARIABLE
df['quality'].value_counts()

df.groupby('quality').mean()

#DEFINE Y(LABEL)AND X(FAETURES)
y = df['quality']

y.shape

y

x = df[['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']]

x = df.drop(['quality'],axis=1)

x.shape

x

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

x =ss.fit_transform(x)

x

#GET TRAIN TEST SPLIT
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.3,stratify=y,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

#MODEL TRAIN
from sklearn.svm import SVC

svc=SVC()

svc.fit(x_train,y_train)

#MODEL PRECTION
y_pred=svc.predict(x_test)

y_pred.shape

y_pred

#MODEL EVALUTAION
from sklearn.metrics import confusion_matrix, classification_report

print (confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

#GET MODEL RE-RUN WITH TWO CLASS CREATED FOR WINE QUALITY
y =df ['quality'].apply(lambda y_value:1 if y_value>=6 else 0)

y.value_counts()

#GET TRAIN TEST SPLIT
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.3,stratify=y,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

#MODEL TRAIN
from sklearn.svm import SVC

svc = SVC()

svc.fit(x_train,y_train)

y_pred=svc.predict(x_test)
y_pred.shape

y_pred

#MODEL EVALUTAION
from sklearn.metrics import confusion_matrix, classification_report

print (confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

#FUTURE PREDICTIONS
df_new =df.sample(1)

df_new

df_new.shape

x_new = df_new.drop(['quality'],axis =1)

x_new = ss.fit_transform(x_new)

y_pred_new = svc.predict(x_new)

y_pred_new





